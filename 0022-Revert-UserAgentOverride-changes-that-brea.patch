From b1ce98a3c5d9c921433bf65099f846c4c4e02acf Wed, 10 Jun 2020 01:23:28 +0200
From: Andrew Branson <andrew.branson@jolla.com>
Date: Wed, 10 Jun 2020 01:22:19 +0200
Subject: [PATCH] [useragent] Revert UserAgentOverride changes that break site specific overrides.

This remained broken until site specific overrides were removed in gecko 55. This mechanism will need replacing in ESR60 for this reason.

Patch derived from 'Patch which restores the previously behavior' in bug:
https://bugzilla.mozilla.org/show_bug.cgi?id=1331275

diff --git a/netwerk/base/nsILoadGroup.idl b/netwerk/base/nsILoadGroup.idl
index 4f89bd0..d0cad5e 100644
--- a/netwerk/base/nsILoadGroup.idl
+++ b/netwerk/base/nsILoadGroup.idl
@@ -95,10 +95,4 @@
      * the docShell has created the default request.)
      */
     attribute nsLoadFlags defaultLoadFlags;
-
-    /**
-     * The cached user agent override created by UserAgentOverrides.jsm. Used
-     * for all sub-resource requests in the loadgroup.
-     */
-    attribute ACString userAgentOverrideCache;
 };
diff --git a/netwerk/base/nsLoadGroup.cpp b/netwerk/base/nsLoadGroup.cpp
index 3b8cf44..963bb5e 100644
--- a/netwerk/base/nsLoadGroup.cpp
+++ b/netwerk/base/nsLoadGroup.cpp
@@ -809,20 +809,6 @@
     return NS_OK;
 }
 
-NS_IMETHODIMP
-nsLoadGroup::GetUserAgentOverrideCache(nsACString & aUserAgentOverrideCache)
-{
-  aUserAgentOverrideCache = mUserAgentOverrideCache;
-  return NS_OK;
-}
-
-NS_IMETHODIMP
-nsLoadGroup::SetUserAgentOverrideCache(const nsACString & aUserAgentOverrideCache)
-{
-  mUserAgentOverrideCache = aUserAgentOverrideCache;
-  return NS_OK;
-}
-
 
 ////////////////////////////////////////////////////////////////////////////////
 
diff --git a/netwerk/base/nsLoadGroup.h b/netwerk/base/nsLoadGroup.h
index da89ca1..20dd94c 100644
--- a/netwerk/base/nsLoadGroup.h
+++ b/netwerk/base/nsLoadGroup.h
@@ -95,8 +95,6 @@
 
     /* For nsPILoadGroupInternal */
     uint32_t                        mTimedNonCachedRequestsUntilOnEndPageLoad;
-
-    nsCString                       mUserAgentOverrideCache;
 };
 
 } // namespace net
diff --git a/netwerk/protocol/http/UserAgentOverrides.jsm b/netwerk/protocol/http/UserAgentOverrides.jsm
index 22c676f..037aa57 100644
--- a/netwerk/protocol/http/UserAgentOverrides.jsm
+++ b/netwerk/protocol/http/UserAgentOverrides.jsm
@@ -46,9 +46,9 @@
     Services.prefs.addObserver(PREF_OVERRIDES_ENABLED, buildOverrides, false);
 
     try {
-      Services.obs.addObserver(HTTP_on_useragent_request, "http-on-useragent-request", false);
+      Services.obs.addObserver(HTTP_on_modify_request, "http-on-modify-request", false);
     } catch (x) {
-      // The http-on-useragent-request notification is disallowed in content processes.
+      // The http-on-modify-request notification is disallowed in content processes.
     }
 
     UserAgentUpdates.init(function(overrides) {
@@ -118,7 +118,7 @@
 
     Services.prefs.removeObserver(PREF_OVERRIDES_ENABLED, buildOverrides);
 
-    Services.obs.removeObserver(HTTP_on_useragent_request, "http-on-useragent-request");
+    Services.obs.removeObserver(HTTP_on_modify_request, "http-on-modify-request");
   },
 
   receiveMessage: function(aMessage) {
@@ -169,7 +169,7 @@
   }
 }
 
-function HTTP_on_useragent_request(aSubject, aTopic, aData) {
+function HTTP_on_modify_request(aSubject, aTopic, aData) {
   let channel = aSubject.QueryInterface(Ci.nsIHttpChannel);
 
   for (let callback of gOverrideFunctions) {
diff --git a/netwerk/protocol/http/nsHttpChannel.cpp b/netwerk/protocol/http/nsHttpChannel.cpp
index 0e570e8..5447b90 100644
--- a/netwerk/protocol/http/nsHttpChannel.cpp
+++ b/netwerk/protocol/http/nsHttpChannel.cpp
@@ -6031,8 +6031,6 @@
     // notify "http-on-modify-request" observers
     CallOnModifyRequestObservers();
 
-    SetLoadGroupUserAgentOverride();
-
     // Check if request was cancelled during on-modify-request or on-useragent.
     if (mCanceled) {
         return mStatus;
@@ -8369,50 +8367,6 @@
 }
 
 void
-nsHttpChannel::SetLoadGroupUserAgentOverride()
-{
-    nsCOMPtr<nsIURI> uri;
-    GetURI(getter_AddRefs(uri));
-    nsAutoCString uriScheme;
-    if (uri) {
-        uri->GetScheme(uriScheme);
-    }
-
-    // We don't need a UA for file: protocols.
-    if (uriScheme.EqualsLiteral("file")) {
-        gHttpHandler->OnUserAgentRequest(this);
-        return;
-    }
-
-    nsIRequestContextService* rcsvc = gHttpHandler->GetRequestContextService();
-    nsCOMPtr<nsIRequestContext> rc;
-    if (rcsvc) {
-        rcsvc->GetRequestContext(mRequestContextID,
-                                    getter_AddRefs(rc));
-    }
-
-    nsAutoCString ua;
-    if (nsContentUtils::IsNonSubresourceRequest(this)) {
-        gHttpHandler->OnUserAgentRequest(this);
-        if (rc) {
-            GetRequestHeader(NS_LITERAL_CSTRING("User-Agent"), ua);
-            rc->SetUserAgentOverride(ua);
-        }
-    } else {
-        GetRequestHeader(NS_LITERAL_CSTRING("User-Agent"), ua);
-        // Don't overwrite the UA if it is already set (eg by an XHR with explicit UA).
-        if (ua.IsEmpty()) {
-            if (rc) {
-                rc->GetUserAgentOverride(ua);
-                SetRequestHeader(NS_LITERAL_CSTRING("User-Agent"), ua, false);
-            } else {
-                gHttpHandler->OnUserAgentRequest(this);
-            }
-        }
-    }
-}
-
-void
 nsHttpChannel::SetDoNotTrack()
 {
   /**
@@ -8430,7 +8384,6 @@
   }
 }
 
-
 void
 nsHttpChannel::ReportNetVSCacheTelemetry()
 {
diff --git a/netwerk/protocol/http/nsHttpChannel.h b/netwerk/protocol/http/nsHttpChannel.h
index ad8156e..9618442 100644
--- a/netwerk/protocol/http/nsHttpChannel.h
+++ b/netwerk/protocol/http/nsHttpChannel.h
@@ -459,8 +459,6 @@
 
     void MaybeWarnAboutAppCache();
 
-    void SetLoadGroupUserAgentOverride();
-
     void SetDoNotTrack();
 
 private:
diff --git a/netwerk/protocol/http/nsHttpHandler.h b/netwerk/protocol/http/nsHttpHandler.h
index 13cc72e..7b71bf2 100644
--- a/netwerk/protocol/http/nsHttpHandler.h
+++ b/netwerk/protocol/http/nsHttpHandler.h
@@ -280,12 +280,6 @@
         NotifyObservers(chan, NS_HTTP_ON_MODIFY_REQUEST_TOPIC);
     }
 
-    // Called by the channel and cached in the loadGroup
-    void OnUserAgentRequest(nsIHttpChannel *chan)
-    {
-      NotifyObservers(chan, NS_HTTP_ON_USERAGENT_REQUEST_TOPIC);
-    }
-
     // Called by the channel once headers are available
     void OnExamineResponse(nsIHttpChannel *chan)
     {
diff --git a/netwerk/protocol/http/nsIHttpProtocolHandler.idl b/netwerk/protocol/http/nsIHttpProtocolHandler.idl
index f333a55..82ac83f 100644
--- a/netwerk/protocol/http/nsIHttpProtocolHandler.idl
+++ b/netwerk/protocol/http/nsIHttpProtocolHandler.idl
@@ -113,14 +113,5 @@
  */
 #define NS_HTTP_ON_EXAMINE_CACHED_RESPONSE_TOPIC "http-on-examine-cached-response"
 
-/**
- * Before an HTTP request corresponding to a channel with the LOAD_DOCUMENT_URI
- * flag is sent to the server, this observer topic is notified. The observer of
- * this topic can then choose to modify the user agent for this request before
- * the request is actually sent to the server. Additionally, the modified user
- * agent will be propagated to sub-resource requests from the same load group.
- */
-#define NS_HTTP_ON_USERAGENT_REQUEST_TOPIC "http-on-useragent-request"
-
 
 %}
