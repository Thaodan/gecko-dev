From 84d1c270b53d0de76c60483098e47b595471ee5f Mon Sep 17 00:00:00 2001
From: Raine Makelainen <raine.makelainen@jolla.com>
Date: Fri, 17 Apr 2020 12:44:15 +0300
Subject: [PATCH] Allow compositor specializations to override the composite
 (part 2)

Original author: Andrew den Exter <andrew.den.exter@qinetic.com.au>
SHA1: ba21a8694e261769fa53e54a846eeaa651826769

Signed-off-by: Raine Makelainen <raine.makelainen@jolla.com>
---
 gfx/layers/ipc/CompositorBridgeParent.cpp      |  6 ++++++
 gfx/layers/ipc/CompositorBridgeParent.h        |  1 +
 gfx/layers/ipc/CompositorVsyncScheduler.cpp    | 10 +++++++---
 gfx/layers/ipc/CompositorVsyncSchedulerOwner.h |  1 +
 4 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/gfx/layers/ipc/CompositorBridgeParent.cpp b/gfx/layers/ipc/CompositorBridgeParent.cpp
index c0f2b7db0ea5..e1e0892de213 100644
--- a/gfx/layers/ipc/CompositorBridgeParent.cpp
+++ b/gfx/layers/ipc/CompositorBridgeParent.cpp
@@ -864,6 +864,12 @@ CompositorBridgeParent::SetShadowProperties(Layer* aLayer)
     );
 }
 
+void
+CompositorBridgeParent::CompositeToDefaultTarget()
+{
+  CompositeToTarget(nullptr);
+}
+
 void
 CompositorBridgeParent::CompositeToTarget(DrawTarget* aTarget, const gfx::IntRect* aRect)
 {
diff --git a/gfx/layers/ipc/CompositorBridgeParent.h b/gfx/layers/ipc/CompositorBridgeParent.h
index 12a31612561f..3c0cb7ac9163 100644
--- a/gfx/layers/ipc/CompositorBridgeParent.h
+++ b/gfx/layers/ipc/CompositorBridgeParent.h
@@ -499,6 +499,7 @@ protected:
   bool IsPendingComposite() override;
   void FinishPendingComposite() override;
   void CompositeToTarget(gfx::DrawTarget* aTarget, const gfx::IntRect* aRect = nullptr) override;
+  virtual void CompositeToDefaultTarget() override;
 
   RefPtr<Compositor> NewCompositor(const nsTArray<LayersBackend>& aBackendHints);
   void ResetCompositorTask(const nsTArray<LayersBackend>& aBackendHints,
diff --git a/gfx/layers/ipc/CompositorVsyncScheduler.cpp b/gfx/layers/ipc/CompositorVsyncScheduler.cpp
index 862b0c87f115..ef7444a75ca8 100644
--- a/gfx/layers/ipc/CompositorVsyncScheduler.cpp
+++ b/gfx/layers/ipc/CompositorVsyncScheduler.cpp
@@ -245,7 +245,7 @@ CompositorVsyncScheduler::Composite(TimeStamp aVsyncTimestamp)
   if (mNeedsComposite || mAsapScheduling) {
     mNeedsComposite = 0;
     mLastCompose = aVsyncTimestamp;
-    ComposeToTarget(nullptr);
+    mVsyncSchedulerOwner->CompositeToDefaultTarget();
     mVsyncNotificationsSkipped = 0;
 
     TimeDuration compositeFrameTotal = TimeStamp::Now() - aVsyncTimestamp;
@@ -333,7 +333,7 @@ CompositorVsyncScheduler::ResumeComposition()
 {
   MOZ_ASSERT(CompositorThreadHolder::IsInCompositorThread());
   mLastCompose = TimeStamp::Now();
-  ComposeToTarget(nullptr);
+  mVsyncSchedulerOwner->CompositeToDefaultTarget();
 }
 
 void
@@ -341,7 +341,11 @@ CompositorVsyncScheduler::ComposeToTarget(gfx::DrawTarget* aTarget, const IntRec
 {
   MOZ_ASSERT(CompositorThreadHolder::IsInCompositorThread());
   MOZ_ASSERT(mVsyncSchedulerOwner);
-  mVsyncSchedulerOwner->CompositeToTarget(aTarget, aRect);
+  if (aTarget) {
+    mVsyncSchedulerOwner->CompositeToTarget(aTarget, aRect);
+  } else {
+    mVsyncSchedulerOwner->CompositeToDefaultTarget();
+  }
 }
 
 const TimeStamp&
diff --git a/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h b/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h
index 93a76e015dc5..f1570b90dae4 100644
--- a/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h
+++ b/gfx/layers/ipc/CompositorVsyncSchedulerOwner.h
@@ -21,6 +21,7 @@ public:
   virtual bool IsPendingComposite() = 0;
   virtual void FinishPendingComposite() = 0;
   virtual void CompositeToTarget(gfx::DrawTarget* aTarget, const gfx::IntRect* aRect = nullptr) = 0;
+  virtual void CompositeToDefaultTarget() = 0;
 };
 
 } // namespace layers
-- 
2.25.2

