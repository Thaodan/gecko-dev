From 3d6756c360598fee4c3558129d2ff481c7b0ad90 Mon Sep 17 00:00:00 2001
From: Piotr Tworek <piotr.tworek@jollamobile.com>
Date: Wed, 24 Jun 2015 13:10:49 +0200
Subject: [PATCH 16/17] Implement support for Pausing/Resuming OpenGL
 compositing process.

This patch implements the necessary bits to allowing multiple CompositorOGL
instances to share the same compsiting surface. Without the patch
CompositorOGL::{Pause|Resume} are basically no-ops in embedlite builds.

It's not clear if this patch is needed for gecko v38. Contrary to gecko v31
::Pause and ::Resume calls in v38 are actually implemented for non Android
platforms.
---
 gfx/gl/GLContextProviderEGL.cpp     |  9 ++++++++-
 gfx/layers/opengl/CompositorOGL.cpp | 40 ++++++++++++++++++++++++++++++++++---
 gfx/layers/opengl/CompositorOGL.h   |  2 ++
 gfx/thebes/gfxPrefs.h               |  1 +
 4 files changed, 48 insertions(+), 4 deletions(-)

diff --git a/gfx/gl/GLContextProviderEGL.cpp b/gfx/gl/GLContextProviderEGL.cpp
index e6d89bf..867ad65 100644
--- a/gfx/gl/GLContextProviderEGL.cpp
+++ b/gfx/gl/GLContextProviderEGL.cpp
@@ -101,6 +101,7 @@ public:
 #include "gfxFailure.h"
 #include "gfxASurface.h"
 #include "gfxPlatform.h"
+#include "gfxPrefs.h"
 #include "GLContextProvider.h"
 #include "GLLibraryEGL.h"
 #include "TextureImageEGL.h"
@@ -416,7 +417,13 @@ GLContextEGL::IsCurrent() {
 bool
 GLContextEGL::RenewSurface() {
     if (!mOwnsContext) {
-        return false;
+        if (gfxPrefs::UseExternalWindow()) {
+            mSurface = sEGLLibrary.fGetCurrentSurface(LOCAL_EGL_DRAW);
+            MOZ_ASSERT(mSurface != EGL_NO_SURFACE);
+            return MakeCurrent(true);
+        } else {
+            return false;
+        }
     }
 #ifndef MOZ_WIDGET_ANDROID
     MOZ_CRASH("unimplemented");
diff --git a/gfx/layers/opengl/CompositorOGL.cpp b/gfx/layers/opengl/CompositorOGL.cpp
index 2c5f79f..72812c4 100644
--- a/gfx/layers/opengl/CompositorOGL.cpp
+++ b/gfx/layers/opengl/CompositorOGL.cpp
@@ -161,6 +161,7 @@ CompositorOGL::CompositorOGL(nsIWidget *aWidget, int aSurfaceWidth,
   , mUseExternalSurfaceSize(aUseExternalSurfaceSize)
   , mFrameInProgress(false)
   , mDestroyed(false)
+  , mPaused(false)
   , mHeight(0)
 {
   MOZ_COUNT_CTOR(CompositorOGL);
@@ -1404,28 +1405,61 @@ CompositorOGL::CopyToTarget(DrawTarget *aTarget, const gfx::Matrix& aTransform)
 void
 CompositorOGL::Pause()
 {
-#ifdef MOZ_WIDGET_ANDROID
-  if (!gl() || gl()->IsDestroyed())
+#if defined(MOZ_WIDGET_ANDROID) || defined(MOZ_WIDGET_QT)
+  if (!gl() || gl()->IsDestroyed() || !gfxPrefs::UseExternalWindow())
     return;
 
+  if (mFrameInProgress) {
+    // The browser may request compositor pause when actual compositing is
+    // in progress. Make sure we abort this process.
+    AbortFrame();
+  }
   // ReleaseSurface internally calls MakeCurrent.
   gl()->ReleaseSurface();
+
+  mPaused = true;
 #endif
 }
 
 bool
 CompositorOGL::Resume()
 {
-#ifdef MOZ_WIDGET_ANDROID
+#if defined(MOZ_WIDGET_ANDROID) || defined(MOZ_WIDGET_QT)
+  if (!gfxPrefs::UseExternalWindow())
+    return true;
+
   if (!gl() || gl()->IsDestroyed())
     return false;
 
+  realGLboolean scissorTestEnabled;
+  gl()->MakeCurrent();
+  gl()->fGetBooleanv(LOCAL_GL_SCISSOR_TEST, &scissorTestEnabled);
+  if (scissorTestEnabled) {
+    // Reset scissor box that might have been left behind by previous
+    // compositor instance operating on the same window surface. Take into
+    // account cached scissor box stored inside GLContext::mScissorRect may
+    // actually be of mWidgetSize which would make the call a noop.
+    gl()->fScissor(0, 0, mWidgetSize.width - 1, mWidgetSize.height - 1);
+    gl()->fScissor(0, 0, mWidgetSize.width, mWidgetSize.height);
+  }
+
+  mPaused = false;
+
   // RenewSurface internally calls MakeCurrent.
   return gl()->RenewSurface();
 #endif
   return true;
 }
 
+bool
+CompositorOGL::Ready()
+{
+  if (gfxPrefs::UseExternalWindow() && mPaused) {
+    return false;
+  }
+  return Compositor::Ready();
+}
+
 TemporaryRef<DataTextureSource>
 CompositorOGL::CreateDataTextureSource(TextureFlags aFlags)
 {
diff --git a/gfx/layers/opengl/CompositorOGL.h b/gfx/layers/opengl/CompositorOGL.h
index 97b6c14..416e49e 100644
--- a/gfx/layers/opengl/CompositorOGL.h
+++ b/gfx/layers/opengl/CompositorOGL.h
@@ -259,6 +259,7 @@ public:
 
   virtual void Pause() MOZ_OVERRIDE;
   virtual bool Resume() MOZ_OVERRIDE;
+  virtual bool Ready() MOZ_OVERRIDE;
 
   virtual nsIWidget* GetWidget() const MOZ_OVERRIDE { return mWidget; }
 
@@ -410,6 +411,7 @@ private:
   RefPtr<CompositorTexturePoolOGL> mTexturePool;
 
   bool mDestroyed;
+  bool mPaused;
 
   /**
    * Height of the OpenGL context's primary framebuffer in pixels. Used by
diff --git a/gfx/thebes/gfxPrefs.h b/gfx/thebes/gfxPrefs.h
index 9b102b7..825a740 100644
--- a/gfx/thebes/gfxPrefs.h
+++ b/gfx/thebes/gfxPrefs.h
@@ -140,6 +140,7 @@ private:
   DECL_GFX_PREF(Once, "gfx.canvas.skiagl.cache-items",         CanvasSkiaGLCacheItems, int32_t, 256);
 
   DECL_GFX_PREF(Once, "gfx.compositor.clear-context",          ClearCompoisitorContext, bool, true);
+  DECL_GFX_PREF(Once, "gfx.compositor.external-window",        UseExternalWindow, bool, false);
 
   DECL_GFX_PREF(Live, "gfx.color_management.enablev4",         CMSEnableV4, bool, false);
   DECL_GFX_PREF(Live, "gfx.color_management.mode",             CMSMode, int32_t,-1);
-- 
2.3.6

